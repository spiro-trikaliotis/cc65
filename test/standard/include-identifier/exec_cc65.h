// vim: set et ts=2 sw=2:

// create a testfile (".c") which contains an include
// for the header to be tested (only)
//
// If the filename_header is empty, create an empty file.
// This way, we can create a list of identifiers that are
// generated by the compiler itself
static std::string create_test_c_file(void)
{

  std::ofstream ofs(names_and_parameters::target_c_filename);

  if (names_and_parameters::filename_header.size() > 0) {
    ofs << "#include <" + names_and_parameters::filename_header + ">";
  }

  return names_and_parameters::target_c_filename;
}

// collect the identifiers from the cc65 invocation
// for later processing
static void collect_identifiers(void)
{
  // collect data from cc65 invocation
  collect_macros();
  collect_symbols();
}

static void call_cc65_for_test(void)
{
  std::vector<std::string> arguments;

  arguments.push_back("--debug");
  arguments.push_back("--debug-tables");
  arguments.push_back(names_and_parameters::filename_debugtables);
  arguments.push_back("--standard");
  arguments.push_back(names_and_parameters::cc65_standard);

  std::string filename_test = create_test_c_file();
  arguments.push_back(filename_test);

  execute_cc65(names_and_parameters::filename_cc65exe, arguments);

  collect_identifiers();
}


